<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <properties>
    <revision>1.9.7.BUILD-SNAPSHOT</revision>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <groupId>org.aspectj</groupId>
  <artifactId>aspectj-parent</artifactId>
  <packaging>pom</packaging>
  <version>1.9.7.BUILD-SNAPSHOT</version>
  <name>AspectJ Parent Project</name>

  <modules>
    <module>util</module>
    <module>bridge</module>
    <module>testing-util</module>
    <module>org.aspectj.matcher</module>
    <module>asm</module>
    <module>testing-client</module>
<!--    <module>ajbrowser</module>-->
    <module>runtime</module>
    <module>bcel-builder</module>
    <module>weaver</module>
    <module>loadtime</module>
    <module>org.eclipse.jdt.core</module>
    <module>org.aspectj.ajdt.core</module>
    <module>ajde.core</module>
    <module>ajde</module>
    <module>ajdoc</module>
    <module>taskdefs</module>
    <module>testing</module>
    <module>testing-drivers</module>
    <module>tests</module>
    <module>build</module>
    <module>run-all-junit-tests</module>
    <module>docs</module>

    <!-- create the important artifacts we care about -->
    <module>aspectjrt</module>
    <module>aspectjweaver</module>
    <module>aspectjtools</module>
    <module>aspectjmatcher</module>

    <!-- build the java -jar'able installer -->
    <module>installer</module>
  </modules>

  <!--
  Caveat: Automatic, JDK-based profile activation can *not* be inherited by child POMs defining
  the same profiles. Thus, we have to repeat activation conditions there.

  Note: We can check if automatic profile activation works via mvn help:active-profiles.
-->
  <profiles>
    <profile>
      <id>jdk-8-to-15</id>
      <activation>
        <jdk>[1.8,16)</jdk>
      </activation>
      <properties>
        <jvm.arg.addOpens/>
      </properties>
    </profile>
    <profile>
      <id>jdk-16-to-xx</id>
      <activation>
        <jdk>[16,)</jdk>
      </activation>
      <properties>
        <jvm.arg.addOpens>--add-opens java.base/java.lang=ALL-UNNAMED</jvm.arg.addOpens>
      </properties>
    </profile>
  </profiles>

  <build>

    <pluginManagement>
      <plugins>
<!--
        <plugin> &lt;!&ndash; For printing console messages during maven build. &ndash;&gt;
          <groupId>com.soebes.maven.plugins</groupId>
          <artifactId>echo-maven-plugin</artifactId>
          <version>0.4.0</version>
        </plugin>
-->

        <!-- Plugin version management here for all modules is generally useful.
             It is required for IntelliJ IDEA 2020.3 to override older  versions referenced
             in their maven implementation and super pom. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>3.3.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.0.0-M1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-help-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>3.0.0-M1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.2.0</version>
          <configuration>
            <archive>
              <addMavenDescriptor>false</addMavenDescriptor>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.0.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>3.0.0-M1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.0.0-M5</version>
          <configuration>
            <!--<testFailureIgnore>true</testFailureIgnore>-->
            <argLine>${jvm.arg.addOpens}</argLine>
            <excludes>
              <exclude>**/*ModuleTests.java</exclude>
            </excludes>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>1.9.1</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <addMavenDescriptor>false</addMavenDescriptor>
          </archive>
        </configuration>
        <executions>
          <execution>
            <id>test-jar</id>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>.</directory>
              <includes>
                <include>**/ajcore.*.txt</include>
              </includes>
              <!--
                                          <excludes>
                                              <exclude>**/important.log</exclude>
                                              <exclude>**/another-important.log</exclude>
                                          </excludes>
              -->
              <followSymlinks>false</followSymlinks>
            </fileset>
            <fileset>
              <directory>aj-build</directory>
              <!--
                                          <includes>
                                              <include>**/*.tmp</include>
                                              <include>**/*.log</include>
                                          </includes>
                                          <excludes>
                                              <exclude>**/important.log</exclude>
                                              <exclude>**/another-important.log</exclude>
                                          </excludes>
              -->
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!--
          This plugin is nice to have in the POM, because then it is easy to double-click a goal such as 'effective-pom',
          'active-profiles', 'effective-settings' or 'evaluate' from a modern IDE in order to get quick information about
          the current build configuration for any given module.
      -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
      </plugin>
    </plugins>

  </build>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.6.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

</project>
